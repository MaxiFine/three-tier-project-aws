# provider "aws" {
#   region = local.origin_region

#   # Make it faster by skipping something
#   skip_metadata_api_check     = true
#   skip_region_validation      = true
#   skip_credentials_validation = true
# }

# provider "aws" {
#   region = local.replica_region

#   alias = "replica"

#   # Make it faster by skipping something
#   skip_metadata_api_check     = true
#   skip_region_validation      = true
#   skip_credentials_validation = true
# }

# locals {
#   bucket_name             = "source-s3-bucket-${random_pet.this.id}"
#   destination_bucket_name = "destination-s3-bucket-${random_pet.this.id}"
#   origin_region           = "eu-west-1"
#   replica_region          = "eu-central-1"
# }

# # data "aws_caller_identity" "current" {}

# resource "random_pet" "this" {
#   length = 2
# }

# resource "aws_kms_key" "replica" {
#   provider = aws.replica

#   description             = "S3 bucket replication KMS key"
#   deletion_window_in_days = 7
# }

# module "replica_bucket" {
#   source = "../.."

#   providers = {
#     aws = aws.replica
#   }

# #   bucket_name = local.destination_bucket_name
# }

# module "s3_bucket" {
#   source = "../../"

#   bucket = local.bucket_name

#   versioning {
#     enabled = true
#   }

#   replication_configuration {
#     role = aws_iam_role.replication.arn

#     rules {
#       id     = "something-with-kms-and-filter"
#       status = "Enabled"
#       priority = 10

#       delete_marker_replication {
#         status = "Disabled"
#       }

#       source_selection_criteria {
#         replica_modifications {
#           status = "Enabled"
#         }
#         sse_kms_encrypted_objects {
#           status = "Enabled"
#         }
#       }

#       filter {
#         prefix = "one"
#         tags = {
#           ReplicateMe = "Yes"
#         }
#       }

#       destination {
#         bucket        = "arn:aws:s3:::${local.destination_bucket_name}"
#         storage_class = "STANDARD"

#         replica_kms_key_id = aws_kms_key.replica.arn
#         account_id         = data.aws_caller_identity.current.account_id

#         access_control_translation {
#           owner = "Destination"
#         }

#         replication_time {
#           status = "Enabled"
#           time {
#             minutes = 15
#           }
#         }

#         metrics {
#           status = "Enabled"
#           event_threshold {
#             minutes = 15
#           }
#         }
#       }
#     }

#     rules {
#       id     = "something-with-filter"
#       status = "Enabled"
#       priority = 20

#       delete_marker_replication {
#         status = "Disabled"
#       }

#       filter {
#         prefix = "two"
#         tags = {
#           ReplicateMe = "Yes"
#         }
#       }

#       destination {
#         bucket        = "arn:aws:s3:::${local.destination_bucket_name}"
#         storage_class = "STANDARD"
#       }
#     }

#     rules {
#       id     = "everything-with-filter"
#       status = "Enabled"
#       priority = 30

#       delete_marker_replication {
#         status = "Enabled"
#       }

#       filter {
#         prefix = ""
#       }

#       destination {
#         bucket        = "arn:aws:s3:::${local.destination_bucket_name}"
#         storage_class = "STANDARD"
#       }
#     }

#     rules {
#       id     = "everything-without-filters"
#       status = "Enabled"

#       delete_marker_replication {
#         status = "Enabled"
#       }

#       destination {
#         bucket        = "arn:aws:s3:::${local.destination_bucket_name}"
#         storage_class = "STANDARD"
#       }
#     }
#   }
# }

###################
## new fix testing
###################

provider "aws" {
  region = "eu-west-1"  # Origin region (e.g., Ireland)

  skip_metadata_api_check     = true
  skip_region_validation      = true
  skip_credentials_validation = true
}

provider "aws" {
  alias   = "replica"
  region  = "eu-central-1"  # Replica region (e.g., Frankfurt)

  skip_metadata_api_check     = true
  skip_region_validation      = true
  skip_credentials_validation = true
}

locals {
  origin_bucket_name   = "origin-bucket-${random_pet.this.id}"
  replica_bucket_name  = "replica-bucket-${random_pet.this.id}"
}

resource "random_pet" "this" {
  length = 2
}

#---------------------------
# Replica Bucket (Frankfurt)
#---------------------------
resource "aws_s3_bucket" "replica" {
  provider = aws.replica
  bucket   = local.replica_bucket_name

  # versioning {
  #   enabled = true  # Required for replication
  # }
}

resource "aws_s3_bucket_versioning" "source_bucket" {
  provider = aws.replica
  bucket = aws_s3_bucket.replica.id

  versioning_configuration {
    status = "Enabled"
  }
}

#---------------------------
# Origin Bucket (Ireland)
#---------------------------
resource "aws_s3_bucket" "origin" {
  bucket = local.origin_bucket_name

  # versioning {
  #   enabled = true
  # }

  replication_configuration {
    role = aws_iam_role.replication.arn

    rules {
      id       = "full-replication"
      status   = "Enabled"
      priority = 10

      filter {}  # Replicate all objects

      destination {
        bucket        = aws_s3_bucket.replica.arn
        storage_class = "STANDARD"
      }
    }
  }

#   depends_on = [aws_iam_role_policy_attachment.replication]
  # depends_on = [iam.aws_iam_role_policy_attachment.replication]
  depends_on = [ aws_iam_policy_attachment.replication]
}

resource "aws_s3_bucket_versioning" "origin" {

  bucket = aws_s3_bucket.origin.id

  versioning_configuration {
    status = "Enabled"
  }
}

# ---------------------------
# KMS Key (Replica Region)
# # ---------------------------
# resource "aws_kms_key" "replica" {
#   provider = aws.replica

#   description             = "S3 Replica Bucket KMS Key"
#   deletion_window_in_days = 7
# }

# ---------------------------
# IAM Role & Policy
# ---------------------------
resource "aws_iam_role" "replication" {
  name = "s3-replication-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Effect = "Allow",
      Principal = {
        Service = "s3.amazonaws.com"
      }
    }]
  })
}

# # using Iam to configure replication
# resource "aws_iam_policy" "replication" {
#   name = "s3-replication-policy"

#   policy = jsonencode({
#     Version = "2012-10-17",
#     Statement = [
#       {
#         Action = [
#           "s3:GetReplicationConfiguration",
#           "s3:ListBucket",
#           "s3:GetObjectVersion",
#           "s3:ReplicateObject",
#           "s3:ReplicateDelete",
#           "s3:ReplicateTags"
#         ],
#         Effect   = "Allow",
#         Resource = "*"
#       }
#     ]
#   })
# }

resource "aws_iam_role_policy_attachment" "replication" {
#   role       = aws_iam_role.replication.name
  role       = iam.aws_iam_role.replication.name
  policy_arn = aws_iam_policy.replication.arn
}



